TEAPOT Packages
===============

TEAPOT repositories are able to handle packages which are either in
the form of a Tcl Module or in the form of a Zip archive.

Tcl Modules
-----------

A package in the form of a Tcl Module is a single source'able
file. The meta data for such a package is stored in the Tcl
header/part of the file and has the form shown below:

        # @@ Meta Begin
        # Package asn 0.4.2
        # Meta Category ASN.1 processing
        # Meta Description ASN.1 BER encoder/decoder
        # Meta Platform tcl
        # Meta Require {Tcl -version 8.4} log math::bignum
        # Meta Subject x.208 internet x.209 ber protocol cer asn der
        # @@ Meta End

This means that the meta data can be read and modified with any text
editor available to the user.


Zip archive
-----------

A package in the form of a Zip archive is a single file which contains
one or more files providing the functionality of the package. All
paths in the archive are relative to the toplevel directory of the
package the archive was created from. The archive has to contain a
file with the 'pkgIndex.tcl'. This is the package index required by
Tcl to find and load the package.

The meta data of the package is _not_ stored in a file in the archive,
but in the per-archive comment section.

It can be extracted from and written to the archive with the 'zipnote'
application. Example:

        Reading:

        % zipnote asn.zip > asn_metadata.txt

        Writing:

        % zipnote -w asn.zip < asn_metadata.txt

The actual meta data has the form

        Package asn 0.4.2
        Meta Category ASN.1 processing
        Meta Description ASN.1 BER encoder/decoder
        Meta Platform tcl
        Meta Require {Tcl -version 8.4} log math::bignum
        Meta Subject x.208 internet x.209 ber protocol cer asn der

When extracted with 'zipnote' this information is however embedded
within additional text generated by zipnote during the
extraction. This additional text is parsed and discarded again during
writing with zipnote. Actually stored is always text in the form shown
above.


Profiles
--------

A _profile_ is a package which has the keyword 'Profile' in its meta
data, with an arbitrary value (Only the existence is relevant).

Profiles take part in dependency-resolution, but are never installed
themselves. I.e. any functionality they may have is ignored. Because
of that they can also be said to be packages which have no
functionality.

Their easiest representation would be a Tcl Module which contains only
the meta data and nothing else.

Their use is the easy specification of a large set of packages
to import, through their dependency information.


General meta data syntax
------------------------

The general syntax to specify meta data is

        Meta KEY word1 word2 ...
        Meta KEY word1' word2' ...'
        ...''

The value associated with the keword KEY then is

    [list word1 word2 ... word1' word2' ...' ...'']

In other words, all words coming after a KEY are collected in the
order given and put into a list to form the value for the keyword. And
if a KEY is specified multiple times then the words of all occurences
are collected in the order given and put into a flat list.

Example:
        The values resulting from the definitions

                Meta Require {Tcl -version 8.2} {md5 -version 2} struct::list

        and
                Meta Require {Tcl -version 8.2}
                Meta Require {md5 -version 2}
                Meta Require struct::list

        are identical.

Note however that there are keywords for which the definition of
multiple values does not make sense. For example 'Platform'.

The definition

        Meta Platform a b

will result in the value "a b", and that string is interpreted as the
platform of the package.


Another important issue is the case-sensitivity of keywords. They are
_not_. Case-sensitive keywords imply that 'Description' and
'description' can have different meanings and usage. No usecase could
be thought of where such a distinction makes sense. Therefore the
system will not make any distinctions based on letter-case. We will
usually write keywords with first letter capitalized, or CamelCased,
but this has no bearing on the internals of the applications and the
databases holding the meta data.


Keywords with predefined semantics
-----------------------------------

The semantics the keywords listed below are defined by the TEAPOT
system. In other words, the TEAPOT applications rely on them being
used by packagers as specified. The details are not listed here, but
in the next section.


        Keyword
        ~~~~~~~
        Description
        Require
        Recommend
        Platform
        Profile
        ~~~~~~~

Other keywords
--------------

While it is possible for any packager to use any other keyword beyond
the predefined ones specified in the last section in any way they like
this is not a recommended course of action.

In this section we list keywords encountered we have seen so far in
package descriptions and other documents (like TIP #55, Dublin Core,
etc.), and the semantics and syntax of their values, as far as we
actually know them.

Legend
        [DC]    The keyword is defined by the Dublin Core Standard for
                Metadata.

        [55]    The keyword is defined in TIP #55.

        [GT]    The keyword is used in Zip files provided by Joe
                English's GUTTER.

        [TP]    The keyword is used by TEAPOT, predefined semantics
                and syntax.


Keyword         Value, Syntax & Semantics
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Description     [TP]
                The value is interpreted as a string describing the
                package.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Require         [TP]
                The value is a list of package references [1]. The
                referenced packages are required for the package to be
                operational.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Recommend       [TP]
                The value is a list of package references [1]. The
                package is operational without them, but may be
                better, faster, ... when they are present.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Platform        [TP]
                The value is interpreted as a string. This is the
                architecture identifier for the package. Using the
                value 'tcl' indicates that the package is written in
                pure Tcl, without any binary parts.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Profile         [TP]
                The package is a profile when this key is present. The
                actual value is irrelevant. Such packages are not
                installed, only used in dependency-resolution.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Title           [DC], [55]
                The value is a free form string containing a
                single-sentence description of the package.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Creator         [DC], [55]
                The value is a list of strings, each containing the
                name of a person, organisation or service responsible
                for the creation of the package optionally followed by
                the email address of the author in angle brackets
                [http://www.faqs.org/rfcs/rfc2822.html]. Email
                addresses may be obfuscated to avoid spam harvesters.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Contributor     [DC], [55]
                Analogous to the 'Creator' keyword, but listing
                contributing persons, organizations, or services.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Rights          [DC], [55]
                The value is a string containing a rights management
                statement for the resource, or reference a service
                providing such information.  This will usually be a
                reference to the license under which the package is
                distributed. This can be a free form string naming the
                license or a URL referring to a document containing
                the text of the license.

                If the keyword is absent, no assumptions can be made
                about the status of these and other rights with
                respect to the resource.

                Examples:
                * BSD
                * http://www.opensource.org/licenses/artistic-license.html
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Url             [55]
                The value is a string containing an url referring to a
                document or site at which the information about the
                package can be found. This url is ''not'' the location
                of the distribution, as this might be part of a larger
                repository separate from the package site.

                Example: http://www.shlrc.mq.edu.au/~steve/tcl/
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Available       [DC], [55]
                The value is the release date of the package in the
                form YYYY-MM-DD.

                YYYY is a four-digit integer number greater than zero
                denoting the year the distribution was released.

                MM is a two-digit integer number greater than zero and
                less than 13. It is padded with zero at the front if
                it less than 10. It denotes the month the distribution
                was released. The number 1 represents January, 2
                represents February; and 12 represents December.

                DD is a two-digit integer number greater than zero and
                less than 32.  It is and padded with zero at the front
                if less than 10. It denotes the day in the month the
                distribution was released.

                Example: 2002-01-23

                (The actual DC keword is Date but it can be refined to
                Created, Available, Applies).
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Conflict        [55]
                The value is a list of package references [1]. Each
                reference names a package with which cannot be
                installed alongside this package. The syntax is the
                same as for 'Require'.

                If a conflicting package is present on the system, an
                installer might offer an option of removing it or not
                installing this package. The TEAPOT client application
                is not doing this.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Subject         [DC], [55]
                The value is a list of (key)words describing the topic
                or content of the package.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Publisher       [DC], [55]
                Analogous to 'Creator' and 'Contributor', referencing
                persons, organizations, or services which make the
                distribution available.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Type            [DC], [55]
                The nature or genre of the content of the
                resource. For a Tcl package the value of this element
                would be Software if the DCMI Type Vocabulary
                [http://au.dublincore.org/documents/2000/07/11/dcmi-type-vocabulary/]
                was used.  A more useful set of types might be
                developed in the future for Tcl packages.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Format          [DC], [55]
                The physical or digital manifestation of the resource.
                This might be used by archive maintainers to specify
                the format of a package archive, eg. zip, tar etc.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Source          [DC], [55]
                A reference to a resource from which the package is
                derived.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Language        [DC], [55]
                A language of the intellectual content of the
                resource.  Could be used if multi-language packages
                are available. Should use the two letter language code
                defined by RFC 1766, eg. 'fr' for French, 'en' for
                English.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Author          [GT]
                See 'Creator'. In contrast to that key the name of a
                person is prefered, not an organization. Email
                addresses are not allowed [2]. The format is per the
                LDAP 'cn' attribute.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
License         [GT]
                A keyword indicating the license (BSD, GPL, LGPL),
                followed by an optional URL pointing to the license
                terms. (The same semantics as 'Rights', but with a
                more constrained format/syntax).
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Homepage        [GT]
                See 'Url'.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Summary         [GT]
                See 'Title'. This is a brief, one-line description of
                the package, suitable for brief listings and
                tables-of-contents.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Date            [GT]
                See 'Available'.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Depends         [GT]
                See 'Require' for basic semantics. Different syntax
                tough. Here the value is a comma seaparated list of
                package names.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Requires        [GT]
                This is for packages which have dependencies on
                libraries which are not Tcl packages. The syntax of
                the value is currently not formally specified.

                Example: tcldom requires libxml2 and consorts.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Build-Depends   [GT]
                See 'Depends', except that the package is required to
                build this package, whereas 'Depends' signals a
                runtime dependency.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Build-Requires  [GT]
                See 'Build-Depends' and 'Requires'.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Freshmeat       [GT]
                Name, and optionally id of the FreshMeat project/entry
                for the package. Syntax is <name> ? "(" <id> ")"?.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Sourceforge     [GT]
                See 'Freshmeat', but for a Sourceforge project.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Sourceforge-ID  [GT]
                OBSOLETE. Used only by old GUTTER packages.
                See 'SourceForge' instead.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
SF-Alt          [GT]
                OBSOLETE
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Wiki            [GT]
                Keyword or page number on the Tcler's Wiki containing
                information related to or about the package.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Release         [GT]
                The upstream version identifier of this release.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Announce        [GT]
                The value is a single url containing the announcement
                for the distribution. Usually a news: URL pointing to
                the announcement on news:comp.lang.tcl
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Announcement    [GT]
                OBSOLETE. See 'Announce' instead.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Source          [GT]
                The value is a list of urls containing the pristine
                sources from which the distribution was made.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Patches         [GT]
                The value is a list of urls to the patches applied to
                the pristine sources as part of building the
                distribution.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
MD5Sum          [GT]
                The md5 checksum of the upstream distribution.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Build           [GT]
                The value is the name of the .zip file the
                distribution is found in. I.e. self-reference.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Build-Host      [GT]
                The value is a string describing the host on which the
                distribution was created. Usually its name and OS
                version.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Build-Date      [GT]
                The date when the distribution was build, in the same
                format as 'Available'.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
SVN             [GT]
                Reference to a Subversion repository containing the
                sources of the package.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
CVS             [GT]
                Reference to a CVS repository containing the sources
                of the package.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
See-Also        [GT]
                The value is a general-purpose "See also" URL. For
                packages with external requirements, there's usually a
                See-Also link to information about the third-party
                packages needed.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Notes           [GT]
                Value is a free form string containing arbitrary text,
                notes by the packager/publisher about the creation of
                the distribution which do not fit into a structured
                schema.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Category        Like 'Title', but describes the 'Subject' of the
                package in a one-line sentence instead of a set of
                keywords.
~~~~~~~         ~~~~~~~~~~~~~~~~~~~~~~~~~
Keyword         Value, Syntax & Semantics


Foot notes
%%%%%%%%%%
[1]     A package reference is a list of the general form

        {name -option value...}

        The currently understood options are:

        -version    VerNum
        -exact      Bool
        -platform   unix|windows|macosx
        -platformid Id

        They provide more details about the reference.

        Examples:

        1.      FOO
                The reference points to package FOO.

        2.      FOO -version X.y

                The reference points to package FOO, at least version
                X.y. with the same major version X.

        3.      FOO -version X.y -exact 1

                The reference points to package FOO, exactly version
                X.y.

        4.      FOO -platform windows

                The reference points to package FOO, and is valid if
                and only if the tcl_platform(platform) on the client
                contains the value "windows".

                In other words, this option is a guard, and makes the
                reference conditional on the platform of the client.
                I.e. the referenced packages is needed if and only if
                the platform is correct, "windows" in the example.

                An actual use case:

                        Tcllib's autoproxy package requires the
                        package 'registry' for its operation, but this
                        is valid only for windows.

                        This is specified in the meta data of
                        autoproxy as

                                Meta Require {registry -platform windows}

                        Any windows client will follow the reference.
                        All other clients will ignore it.

        5.      FOO -platformid linux-*-ix86

                Like -platform, but the value is a glob pattern which
                has to match the result of [platform::identify] run on
                the client for the reference to be valid and used.

[2] Thank you, spammers.
