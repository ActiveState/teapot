Classes and Applications written so far
=======================================

snit::types
-----------

afs	Associative File Storage

	Files are stored under a path derived from the md5 hash of
	their contents.

afs::sig
	signature generation for afs, incl. base32 encoding.
	Could be sped up via critcl of the encoder.
	Encoder could also walk into Tcllib.

	AFS as a whole actually too.

repository::api
	General processing (arg checking, async dispatch)
	Used by the various actual repo impl., see below.

repository::proxy
	Proxy repository. Transforms all user requests
	into http requests for the specified remote
	url.

	Currently handles only Tcl responses.

	Uses repository::api for the generic argument processing and
	checking.

repository::sqlitedir
	Repository based on sqlite for meta and mgmt data.
	Uses an AFS for the files.

	Uses repository::api for the generic argument processing and
	checking.

repository::tiedir
	__Incomplete__ repository which uses tcllib/tie and arrays
	for the mgmt and meta data.

	Uses repository::api for the generic argument processing and
	checking.

repository::mdparse
	Code for the extraction of the meta data stored in
	Tcl Modules (.tm files).

repository::wserver
	Server exporting a repository through http.
	Can generate Tcl and HTML responses.


wub84
	Collection of "snit::type"s by Colin McCormack implementing a
	basic http 1.1 server. Modified by myself to run on 8.4
	(original code uses 8.5 features). Added tcl based dict
	compatibility implementation. This may be removed if Pascal's
	dict backport in C works out.

	This is used by repository::wserver to handle the http
	protocol, allowing wserver to concentrate on interfacing with
	the repository and response generation.

repository::local
	Repository based on sqlite for meta and mgmt data

	Uses an __installation directory__ for the storage of
	packages. Currently handles only Tcl Modules.

	Uses repository::api for the generic argument processing and
	checking.

	NOTE: This type of repository is limited to storing packages
	for exactly one architecture/platform. This architecture can
	be configured as long as the repository is empty, and is
	locked when at least one package has been stored.

repository::mm
	Management of meta data in a sqlite database.

	This package is used by both 'repository::sqlitedir' and
	'repository::local' to handle the meta data. The using
	packages determine and handle mainly the mapping of
	package/module files to their path in the repository.

repository::client
repository::capp
repository::config

	Implementation of the teapot client application.

	'client' is the low-level controller talking to the various
	repositories.

	'config' is the database where the location of both local
	installation and all remote repositories are stored.

	'capp' connects interprets the command line and invokes the
	controller and/or configuration database.

Applications
------------

radmin
	Low-level app for talking to a sqlitedir repository.

rpadmin
	radmin, but talking to a proxy repository.

tmrandom
	Generator for tcl modules without functionality, but
	randomized meta data.

teapot
	The repository client we wish to give to users.  Manages one
	local repository/ installation (type repository::local), and a
	series of remote repositories (type respository::proxy).

	A very thin wrapper around 'repository::capp'.

teapotd

	Exports a 'repository::sqlitedir' repository to users via
	'repository::wserver'. Formerly 'rwserver'.

	Client applications include any web browsers, 'rpadmin' for
	mainly unchecked low-level acces, and 'teapot', the regular
	user client.

tpadmin
	A more official admin application for the creation of new
	repositories, and uploading package files into them. The
	application accesses a repository per its path in the file
	system, i.e. directly, and not through the web interface.

	When called the application manipulates a sqlitedir repository
	by default. Via option --local it can be switched to handle a
	local repository instead.


TODO
====

*	Extend repository::mdparse to handle .zip files and meta data
	stored in a separate file.


NOTES
=====

The HTML responses generated by repository::wserver (when configured
for such) use a trick to make their handling by the repository client
type (i.e. repository::proxy) much easier.

The complete Tcl result is embedded in the response as a HTML comment
with special markers in a specific location. Immediately after the
<body> tag, in a new line.

This allows the client to look just for a simple RE pattern to both
detect such an embedding and extract the actual Tcl result. There is
no need for the client to fully parse the received HTML. Its bulk is
simply thrown away.

